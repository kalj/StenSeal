#ifndef _OPERATOR_LIB_H
#define _OPERATOR_LIB_H

#include "stenseal/stencil.h"
#include "stenseal/operator.h"
#include "stenseal/metric_operator.h"
#include "stenseal/operator_lib.h"
#include "stenseal/stencil_tensor.h"


namespace stenseal
{
  constexpr Operator<2,2,1,2,1> upwind_operator_2nd_order_kalle()
  {
    const stenseal::Symbol usym;

    constexpr stenseal::Stencil<2> interior((-1.0)*usym[-1] + 1.0*usym[0]);
    constexpr stenseal::Stencil<2> left_boundary((-1.0)*usym[0] + 1.0*usym[1]);
    constexpr stenseal::Stencil<2> right_boundary((-1.0)*usym[-1] + 1.0*usym[0]);

    constexpr stenseal::StencilTensor2D<1,2> left_boundary_block(left_boundary);
    constexpr stenseal::StencilTensor2D<1,2> right_boundary_block(right_boundary);

    return stenseal::Operator<2,2,1,2,1> (interior, left_boundary_block, right_boundary_block);
  }

  constexpr Operator<3,2,2,4,2> upwind_operator_2nd_order()
  {
    const stenseal::Symbol usym;

    constexpr stenseal::Stencil<3> interior((0.5)*usym[-2] + (-2.0)*usym[-1] + (1.5)*usym[0]);
    constexpr stenseal::StencilTensor2D<2,2> left_boundary_block((-1.0)*usym[0] + 1.0*usym[1],
                                                                 (-1.0)*usym[-1] + 1.0*usym[0]);
    constexpr stenseal::StencilTensor2D<2,4> right_boundary_block(0.4*usym[-2] + (-1.6)*usym[-1] + 1.0*usym[0] + 0.2*usym[1],
                                                                  0.0*usym[-3] + 2.0*usym[-2] + (-5.0)*usym[-1] +3.0*usym[0]);
    return stenseal::Operator<3,2,2,4,2>(interior, left_boundary_block, right_boundary_block);
  }

  constexpr Operator<4,4,3,5,3> upwind_operator_3rd_order()
  {
    const stenseal::Symbol usym;

    constexpr stenseal::Stencil<4> interior((1.0/6.0)*usym[-2] + (-1.0)*usym[-1] + (1.0/2.0)*usym[0] + (1.0/3.0)*usym[1]);
    constexpr stenseal::StencilTensor2D<3,4> left_boundary_block((-11.0/9.0)*usym[0] + (13.0/9.0)*usym[1] + (-2.0/9.0)*usym[2] + 0*usym[3],
                                                                 (-17.0/28.0)*usym[-1] + (3.0/14.0)*usym[0] + (11.0/28.0)*usym[1] + 0*usym[2],
                                                                 (4.0/23.0)*usym[-2] + (-1)*usym[-1] + (11.0/23.0)*usym[0] + (8.0/23.0)*usym[1]);
    constexpr stenseal::StencilTensor2D<3,5> right_boundary_block((4.0/23.0)*usym[-2] + (-24.0/23.0)*usym[-1] + (11.0/23.0)*usym[0] + (11.0/23.0)*usym[1] + (-2.0/23.0)*usym[2],
                                                                  0*usym[-3] + (1.0/7.0)*usym[-2] + (-23.0/28.0)*usym[-1] + (3.0/14.0) *usym[0] + (13.0/28.0)*usym[1],
                                                                  0*usym[-4] + 0*usym[-3] + (4.0/9.0)*usym[-2] + (-17.0/9.0)*usym[-1] + (13.0/9.0)*usym[0]);
    return stenseal::Operator<4,4,3,5,3>(interior, left_boundary_block, right_boundary_block);
  }

  constexpr Operator<5,5,4,7,4> upwind_operator_4th_order()
  {
    const stenseal::Symbol usym;

    constexpr stenseal::Stencil<5> interior((-1.0/12.0)*usym[-3] + (1.0/2.0)*usym[-2] + (-3.0/2.0)*usym[-1] + (5.0/6.0)*usym[0] + (1.0/4.0)*usym[1]);
    constexpr stenseal::StencilTensor2D<4,5> left_boundary_block((-69.0/49.0)*usym[0] + (169.0/98.0)*usym[1] + (-11.0/49.0)*usym[2]  + (-9.0/98.0)*usym[3] + 0*usym[4],
                                                                 (-205.0/366.0)*usym[-1] +  (11.0/61.0)*usym[0] + (39.0/122.0)*usym[1] + (11.0/183.0)*usym[2] + 0*usym[3],
                                                                 (29.0/123.0)*usym[-2] + (-99.0/82.0)*usym[-1] + (29.0/41.0)*usym[0] + (65.0/246.0)*usym[1] + 0*usym[2],
                                                                 (-3.0/298.0)*usym[-3] + (43.0/149.0)*usym[-2] + (-389.0/298.0)*usym[-1] + (117.0/149.0)*usym[0] + (36.0/149.0)*usym[1]);

    constexpr stenseal::StencilTensor2D<4,7> right_boundary_block((-12.0/149.0)*usym[-3] + (72.0/149.0)*usym[-2] + (-216.0/149.0)*usym[-1] + (117.0/149.0)*usym[0] + (65.0/298.0)*usym[1] + (11.0/149.0)*usym[2] + (-9.0/298.0)*usym[3],
                                                                  0*usym[-4] + (-4.0/41.0)*usym[-3] + (24.0/41.0)*usym[-2] + (-389.0/246.0)*usym[-1]  + (29.0/41.0)*usym[0]  + (39.0/82.0)*usym[1] + (-11.0/123.0)*usym[2],
                                                                  0*usym[-5] +  0*usym[-4] + (-4.0/61.0)*usym[-3] + (43.0/183.0)*usym[-2] + (-99.0/122.0)*usym[-1] + (11.0/61.0)*usym[0] + (169.0/366.0)*usym[1],
                                                                  0*usym[-6] + 0*usym[-5] + 0*usym[-4] + (-3.0/98.0)*usym[-3] + (29.0/49.0)*usym[-2] + (-205.0/98.0)*usym[-1] + (75.0/49.0)*usym[0]);
    return stenseal::Operator<5,5,4,7,4>(interior, left_boundary_block, right_boundary_block);
  }


  constexpr std::pair<MetricOperator<3,3,2>,Operator<2,2,1,2,1>> compact_operators_2nd_order()
  {

    const stenseal::Symbol sym;

    constexpr stenseal::Stencil<2> d1_interior((-0.5)*sym[-1] + 0.5*sym[1]);

    constexpr stenseal::StencilTensor2D<1,2> d1_boundary((-1.0)*sym[0] + 1.0*sym[1]);
    constexpr stenseal::StencilTensor2D<1,2> d1_boundary_r((-1.0)*sym[-1] + 1.0*sym[0]);


    constexpr stenseal::Operator<2,2,1,2,1> D1 (d1_interior,
                                                d1_boundary,
                                                d1_boundary_r);


    constexpr stenseal::StencilTensor2D<3,3> d2_interior((0.5)*sym[-1]  + (0.5)*sym[0] + 0.0*sym[1],
                                                         (-0.5)*sym[-1] + (-1.0)*sym[0]+ (-0.5)*sym[1],
                                                         0.0*sym[-1]    + (0.5)*sym[0] + (0.5)*sym[1]);


    constexpr stenseal::StencilTensor3D<2,3,3> d2_boundary( stenseal::StencilTensor2D<3,3>((2.0)*sym[0]   + (-1.0)*sym[1]  + (0.0)*sym[2],
                                                                                           (-3.0)*sym[-1] + (1.0)*sym[0]   + (0.0)*sym[1],
                                                                                           (1.0)*sym[-2]  + (0.0)*sym[-1]  + (0.0)*sym[0]),
                                                            stenseal::StencilTensor2D<3,3>((0.5)*sym[0]   + (0.5)*sym[1]   + (0.0)*sym[2],
                                                                                           (-0.5)*sym[-1] + (-1.0)*sym[0]  + (-0.5)*sym[1],
                                                                                           (0.0)*sym[-2]  + (0.5)*sym[-1] + (0.5)*sym[0]));
    constexpr stenseal::MetricOperator<3,3,2> D2 (d2_interior,
                                                  d2_boundary);
    return std::make_pair(D2,D1);

  }

  constexpr std::pair<MetricOperator<5,8,6>,Operator<4,6,4,6,4>> compact_operators_4th_order()
  {
    const stenseal::Symbol sym;

    constexpr stenseal::Stencil<4> d1_interior((1.0/12.0)*sym[-2] + (-2.0/3.0)*sym[-1] + (2.0/3.0)*sym[1] + (-1.0/12.0)*sym[2]);

    constexpr stenseal::StencilTensor2D<4,6> d1_boundary(  (-1.4117647058823529412)*sym[0] +      1.7352941176470588235*sym[1] +  (-0.23529411764705882353)*sym[2] + (-0.088235294117647058824)*sym[3] +                        0.0*sym[4] + 0.0*sym[5],
                                                           (-0.5)*sym[-1]                  +                        0.0*sym[0] +                        0.5*sym[1] +                        0.0*sym[2] +                        0.0*sym[3] + 0.0*sym[4],
                                                           0.093023255813953488372*sym[-2] + (-0.68604651162790697674)*sym[-1] +                        0.0*sym[0] +     0.68604651162790697674*sym[1] + (-0.093023255813953488372)*sym[2] + 0.0*sym[3],
                                                           0.030612244897959183673*sym[-3] +                       0.0*sym[-2] + (-0.60204081632653061224)*sym[-1] +                        0.0*sym[0] +     0.65306122448979591837*sym[1] + (-0.081632653061224489796)*sym[2]);


    //                           wi wl hl wr hr
    constexpr stenseal::Operator<4, 6, 4, 6, 4> D1 (d1_interior,
                                                    d1_boundary,
                                                    d1_boundary);


    constexpr stenseal::StencilTensor2D<5,5> d2_interior((-1.0/8.0)*sym[-2]  + (1.0/6.0)*sym[-1]  + (-1.0/8.0)*sym[0] + 0.0*sym[1]        + 0.0*sym[2],
                                                         (1.0/6.0)*sym[-2]   + (1.0/2.0)*sym[-1]  + (1.0/2.0)*sym[0]  + (1.0/6.0)*sym[1]  + 0.0*sym[2],
                                                         (-1.0/24.0)*sym[-2] + (-5.0/6.0)*sym[-1] + (-3.0/4.0)*sym[0] + (-5.0/6.0)*sym[1] + (-1.0/24.0)*sym[2],
                                                         0.0*sym[-2]         + (1.0/6.0)*sym[-1]  + (1.0/2.0)*sym[0]  + (1.0/2.0)*sym[1]  + (1.0/6.0)*sym[2],
                                                         0.0*sym[-2]         + 0.0*sym[-1]        + (-1.0/8.0)*sym[0] + (1.0/6.0)*sym[1]  + (-1.0/8.0)*sym[2]);


    // raw & unpadded

    // constexpr stenseal::StencilTensor2D<3,3> bdry_row0( (920.0/289.0)*sym[0] + (-59.0/68.0)*sym[1] + (-16921097203308885.0/76561193665298432.0)*sym[2] + (-14505272181330201.0/153122387330596864.0)*sym[3],
    //                                                     (-1740.0/289.0)*sym[-1] + (7706713680498729.0/9570149208162304.0)*sym[1] + (8248494986072625.0/38280596832649216.0)*sym[2],
    //                                                     (1128.0/289.0)*sym[-2] + (59.0/68.0)*sym[-1] + (-14034304189615587.0/19140298416324608.0)*sym[0] + (-22985473930784955.0/612489549322387456.0)*sym[1],
    //                                                     (-308.0/289.0)*sym[-3] + (25472723836483791.0/153122387330596864.0)*sym[-1] + (-15405854081185035.0/153122387330596864.0)*sym[0],
    //                                                     (-4224107244118563.0/306244774661193728.0)*sym[-2] + (4224107244118563.0/306244774661193728.0)*sym[-1],
    //                                                     (-3.0/833.0)*sym[-3] + (3.0/833.0)*sym[-2]);

    // constexpr stenseal::StencilTensor2D<3,3> bdry_row1((12.0/17.0)*sym[0] + (7706713680498729.0/33214047251857408.0)*sym[2] + (8248494986072625.0/132856189007429632.0)*sym[3],
    //                                                    (-59.0/68.0)*sym[-1] + (-1019387800837605.0/1037938976620544.0)*sym[1] + (-4989614467211649.0/33214047251857408.0)*sym[2],
    //                                                    (2.0/17.0)*sym[-2] + (26629712570940315.0/33214047251857408.0)*sym[0] + (10707198840441357.0/132856189007429632.0)*sym[1],
    //                                                    (3.0/68.0)*sym[-3] + (-22011006574478757.0/265712378014859264.0)*sym[-1] + (20576803324116987.0/531424756029718528.0)*sym[0],
    //                                                    (7637283276718623.0/265712378014859264.0)*sym[-2] + (-7637283276718623.0/265712378014859264.0)*sym[-1],
    //                                                    (20658889621588665.0/8502796096475496448.0)*sym[-3] + (-20658889621588665.0/8502796096475496448.0)*sym[-2]);


    // constexpr stenseal::StencilTensor2D<3,3> bdry_row2((-96.0/731.0)*sym[0] + (59.0/172.0)*sym[1] + (-14034304189615587.0/48413695994232832.0)*sym[2] + (-22985473930784955.0/1549238271815450624.0)*sym[3],
    //                                                    (118.0/731.0)*sym[-1] + (26629712570940315.0/24206847997116416.0)*sym[1] + (10707198840441357.0/96827391988465664.0)*sym[2],
    //                                                    (-16.0/731.0)*sym[-2] + (-59.0/172.0)*sym[-1] + (-9438068880584031.0/6051711999279104.0)*sym[0] + (-7099640091275823.0/12103423998558208.0)*sym[1] + (-9116736865706535.0/193654783976931328.0)*sym[2],
    //                                                    (-6.0/731.0)*sym[-3] + (11825036044722207.0/12103423998558208.0)*sym[-1] + (10435974299569995.0/48413695994232832.0)*sym[0] + (18178704925930299.0/96827391988465664.0)*sym[1],
    //                                                    (-1369101855400689.0/6051711999279104.0)*sym[-2] + (26573535730229835.0/96827391988465664.0)*sym[-1] + (-3418776324639951.0/24206847997116416.0)*sym[0],
    //                                                    (-17382206278686243.0/12393906174523604992.0)*sym[-3] + (20743598353782897.0/24787812349047209984.0)*sym[-2] + (7010407101794793.0/12393906174523604992.0)*sym[-1]);

    // constexpr stenseal::StencilTensor2D<3,3> bdry_row3((-36.0/833.0)*sym[0] + (3638960548069113.0/63050394783186944.0)*sym[2] + (-15405854081185035.0/441352763482308608.0)*sym[3],
    //                                                    (177.0/3332.0)*sym[-1] + (-22011006574478757.0/220676381741154304.0)*sym[1] + (20576803324116987.0/441352763482308608.0)*sym[2],
    //                                                    (-6.0/833.0)*sym[-2] + (11825036044722207.0/13792273858822144.0)*sym[0] + (10435974299569995.0/55169095435288576.0)*sym[1] + (18178704925930299.0/110338190870577152.0)*sym[2],
    //                                                    (-9.0/3332.0)*sym[-3] + (-3605606833806849.0/3448068464705536.0)*sym[-1] + (-13741603895158215.0/27584547717644288.0)*sym[0] + (-11320613974594359.0/13792273858822144.0)*sym[1] + (-2.0/49.0)*sym[2],
    //                                                    (25567175147372931.0/110338190870577152.0)*sym[-2] + (22998749820605031.0/55169095435288576.0)*sym[-1] + (13634028694447725.0/27584547717644288.0)*sym[0] + (8.0/49.0)*sym[1],
    //                                                    (-9646239693631689.0/7061644215716937728.0)*sym[-3] + (-13195769970450177.0/110338190870577152.0)*sym[-2] + (8925046046516835.0/55169095435288576.0)*sym[-1] + (-6.0/49.0)*sym[0]);

    // constexpr stenseal::StencilTensor2D<8,8> bdry_row4(((-1408035748039521.0/288230376151711744.0)*sym[2] + (1408035748039521.0/288230376151711744.0)*sym[3],
    //                                                     (2545761092239541.0/72057594037927936.0)*sym[1] + (-2545761092239541.0/72057594037927936.0)*sym[2],
    //                                                    (-456367285133563.0/2251799813685248.0)*sym[0] + (8857845243409945.0/36028797018963968.0)*sym[1] + (-1139592108213317.0/9007199254740992.0)*sym[2],
    //                                                    (8522391715790977.0/36028797018963968.0)*sym[-1] + (7666249940201677.0/18014398509481984.0)*sym[0] + (4544676231482575.0/9007199254740992.0)*sym[1] + (1.0/6.0)*sym[2],
    //                                                    (-294131667338205.0/4503599627370496.0)*sym[-2] + (-7251959409109879.0/9007199254740992.0)*sym[-1] + (-6796476045167823.0/9007199254740992.0)*sym[0] + (-5.0/6.0)*sym[1] + (-1.0/24.0)*sym[2],
    //                                                    (1141187437978925.0/1152921504606846976.0)*sym[-3] + (739296073780131.0/4503599627370496.0)*sym[-2] + (4517291828741189.0/9007199254740992.0)*sym[-1] + (1.0/2.0)*sym[0] + (1.0/6.0)*sym[1],
    //                                                    (-1.0/8.0)*sym[-2] + (1.0/6.0)*sym[-1] + (-1.0/8.0)*sym[0]);

    // constexpr stenseal::StencilTensor2D<8,8> bdry_row5( (-1.0/784.0)*sym[2] + (1.0/784.0)*sym[3],
    //                                                     (6886296540529555.0/2305843009213693952.0)*sym[1] + (-6886296540529555.0/2305843009213693952.0)*sym[2],
    //                                                      (-5794068759562081.0/4611686018427387904.0)*sym[0] + (6914532784594299.0/9223372036854775808.0)*sym[1] + (2336802367264931.0/4611686018427387904.0)*sym[2],
    //                                                      (-3215413231210563.0/2305843009213693952.0)*sym[-1] + (-4398589990150059.0/36028797018963968.0)*sym[0] + (2975015348838945.0/18014398509481984.0)*sym[1] + (-1.0/8.0)*sym[2],
    //                                                      (1141187437978925.0/1152921504606846976.0)*sym[-2] + (739296073780131.0/4503599627370496.0)*sym[-1] + (4517291828741189.0/9007199254740992.0)*sym[0] + (1.0/2.0)*sym[1] + (1.0/6.0)*sym[2],
    //                                                      (-3683120583469983.0/73786976294838206464.0)*sym[-3] + (-2962290417147021.0/72057594037927936.0)*sym[-2] + (-7510563446074391.0/9007199254740992.0)*sym[-1] + (-3.0/4.0)*sym[0] + (-5.0/6.0)*sym[1] + (-1.0/24.0)*sym[2],
    //                                                     (1.0/6.0)*sym[-2] + (1.0/2.0)*sym[-1] + (1.0/2.0)*sym[0] + (1.0/6.0)*sym[1],
    //                                                     (-1.0/8.0)*sym[-2] + (1.0/6.0)*sym[-1] + (-1.0/8.0)*sym[0]);

    constexpr stenseal::StencilTensor2D<8,8> bdry_row0((920.0/289.0)*sym[0]    +  (-59.0/68.0)*sym[1] +     (-0.2210140202004)*sym[2] +   (-0.09472992443628)*sym[3] +   (0.0)*sym[4] +   (0.0)*sym[5] +   (0.0)*sym[6] +  (0.0)*sym[7],
                                                       (-1740.0/289.0)*sym[-1] +         (0.0)*sym[0] +     (0.80528667974432)*sym[1] +    (0.21547456593042)*sym[2] +   (0.0)*sym[3] +   (0.0)*sym[4] +   (0.0)*sym[5] +  (0.0)*sym[6],
                                                       (1128.0/289.0)*sym[-2]  +  (59.0/68.0)*sym[-1] +    (-0.73323330098374)*sym[0] +  (-0.037527944690998)*sym[1] +   (0.0)*sym[2] +   (0.0)*sym[3] +   (0.0)*sym[4] +  (0.0)*sym[5],
                                                       (-308.0/289.0)*sym[-3]  +        (0.0)*sym[-2] +    (0.16635532060696)*sym[-1] +   (-0.10061137597028)*sym[0] +   (0.0)*sym[1] +   (0.0)*sym[2] +   (0.0)*sym[3] +  (0.0)*sym[4],
                                                       (0.0)*sym[-4]           +        (0.0)*sym[-3] +  (-0.013793238590901)*sym[-2] +  (0.013793238590901)*sym[-1] +   (0.0)*sym[0] +   (0.0)*sym[1] +   (0.0)*sym[2] +  (0.0)*sym[3],
                                                       (0.0)*sym[-5]           +        (0.0)*sym[-4] +          (-3.0/833.0)*sym[-3] +          (3.0/833.0)*sym[-2] +  (0.0)*sym[-1] +   (0.0)*sym[0] +   (0.0)*sym[1] +  (0.0)*sym[2],
                                                       (0.0)*sym[-6]           +        (0.0)*sym[-5] +                 (0.0)*sym[-4] +                (0.0)*sym[-3] +  (0.0)*sym[-2] +  (0.0)*sym[-1] +   (0.0)*sym[0] +  (0.0)*sym[1],
                                                       (0.0)*sym[-7]           +        (0.0)*sym[-6] +                 (0.0)*sym[-5] +                (0.0)*sym[-4] +  (0.0)*sym[-3] +  (0.0)*sym[-2] +  (0.0)*sym[-1] +  (0.0)*sym[0]);

    constexpr stenseal::StencilTensor2D<8,8> bdry_row1((12.0/17.0)*sym[0]   +   (0.0)*sym[1] +     (0.23203175518057)*sym[2] +     (0.062085891878258)*sym[3] +   (0.0)*sym[4] +   (0.0)*sym[5] +   (0.0)*sym[6] +    (0.0)*sym[7],
                                                       (-59.0/68.0)*sym[-1] +   (0.0)*sym[0] +    (-0.98212691092559)*sym[1] +     (-0.15022603025088)*sym[2] +   (0.0)*sym[3] +   (0.0)*sym[4] +   (0.0)*sym[5] +    (0.0)*sym[6],
                                                       (2.0/17.0)*sym[-2]   +  (0.0)*sym[-1] +      (0.8017605433331)*sym[0] +     (0.080592397843375)*sym[1] +   (0.0)*sym[2] +   (0.0)*sym[3] +   (0.0)*sym[4] +    (0.0)*sym[5],
                                                       (3.0/68.0)*sym[-3]   +  (0.0)*sym[-2] +  (-0.082837716251397)*sym[-1] +     (0.038720069192573)*sym[0] +   (0.0)*sym[1] +   (0.0)*sym[2] +   (0.0)*sym[3] +    (0.0)*sym[4],
                                                       (0.0)*sym[-4]        +  (0.0)*sym[-3] +   (0.028742670303043)*sym[-2] +   (-0.028742670303043)*sym[-1] +   (0.0)*sym[0] +   (0.0)*sym[1] +   (0.0)*sym[2] +    (0.0)*sym[3],
                                                       (0.0)*sym[-5]        +  (0.0)*sym[-4] +  (0.0024296583602836)*sym[-3] +  (-0.0024296583602836)*sym[-2] +  (0.0)*sym[-1] +   (0.0)*sym[0] +   (0.0)*sym[1] +    (0.0)*sym[2],
                                                       (0.0)*sym[-6]        +  (0.0)*sym[-5] +                 (0.0)*sym[-4] +                  (0.0)*sym[-3] +  (0.0)*sym[-2] +  (0.0)*sym[-1] +   (0.0)*sym[0] +    (0.0)*sym[1],
                                                       (0.0)*sym[-7]        +  (0.0)*sym[-6] +                 (0.0)*sym[-5] +                  (0.0)*sym[-4] +  (0.0)*sym[-3] +  (0.0)*sym[-2] +  (0.0)*sym[-1] +  (0.0)*sym[0]);

    constexpr stenseal::StencilTensor2D<8,8> bdry_row2((-96.0/731.0)*sym[0]  +    (59.0/172.0)*sym[1] +     (-0.28988293294706)*sym[2] +    (-0.014836629296441)*sym[3] +                   (0.0)*sym[4] +   (0.0)*sym[5] +   (0.0)*sym[6] +  (0.0)*sym[7],
                                                       (118.0/731.0)*sym[-1] +           (0.0)*sym[0] +       (1.1000900478291)*sym[1] +      (0.11058026680835)*sym[2] +                   (0.0)*sym[3] +   (0.0)*sym[4] +   (0.0)*sym[5] +  (0.0)*sym[6],
                                                       (-16.0/731.0)*sym[-2] +  (-59.0/172.0)*sym[-1] +      (-1.5595700657448)*sym[0] +     (-0.58658112713572)*sym[1] +     (-0.04707726129189)*sym[2] +   (0.0)*sym[3] +   (0.0)*sym[4] +  (0.0)*sym[5],
                                                       (-6.0/731.0)*sym[-3]  +          (0.0)*sym[-2] +     (0.97699923973008)*sym[-1] +      (0.21555830607961)*sym[0] +      (0.18774341178265)*sym[1] +   (0.0)*sym[2] +   (0.0)*sym[3] +  (0.0)*sym[4],
                                                       (0.0)*sym[-4]         +          (0.0)*sym[-3] +    (-0.22623380880712)*sym[-2] +     (0.27444233686884)*sym[-1] +     (-0.14123178387567)*sym[0] +   (0.0)*sym[1] +   (0.0)*sym[2] +  (0.0)*sym[3],
                                                       (0.0)*sym[-5]         +          (0.0)*sym[-4] +  (-0.0014024800602748)*sym[-3] +  (0.00083684667536142)*sym[-2] +  (0.00056563338491339)*sym[-1] +   (0.0)*sym[0] +   (0.0)*sym[1] +  (0.0)*sym[2],
                                                       (0.0)*sym[-6]         +          (0.0)*sym[-5] +                  (0.0)*sym[-4] +                  (0.0)*sym[-3] +                  (0.0)*sym[-2] +  (0.0)*sym[-1] +   (0.0)*sym[0] +  (0.0)*sym[1],
                                                       (0.0)*sym[-7]         +          (0.0)*sym[-6] +                  (0.0)*sym[-5] +                  (0.0)*sym[-4] +                  (0.0)*sym[-3] +  (0.0)*sym[-2] +  (0.0)*sym[-1] +  (0.0)*sym[0]);

    constexpr stenseal::StencilTensor2D<8,8> bdry_row3((-36.0/833.0)*sym[0]   +   (0.0)*sym[1] +     (0.057715111230984)*sym[2] +  (-0.034905987581525)*sym[3] +                (0.0)*sym[4] +        (0.0)*sym[5] +   (0.0)*sym[6] +  (0.0)*sym[7],
                                                       (177.0/3332.0)*sym[-1] +   (0.0)*sym[0] +    (-0.099743372629233)*sym[1] +   (0.046622124129833)*sym[2] +                (0.0)*sym[3] +        (0.0)*sym[4] +   (0.0)*sym[5] +  (0.0)*sym[6],
                                                       (-6.0/833.0)*sym[-2]   +  (0.0)*sym[-1] +      (0.85736667976313)*sym[0] +    (0.18916341145762)*sym[1] +   (0.16475442258477)*sym[2] +        (0.0)*sym[3] +   (0.0)*sym[4] +  (0.0)*sym[5],
                                                       (-9.0/3332.0)*sym[-3]  +  (0.0)*sym[-2] +     (-1.0456888750075)*sym[-1] +    (-0.4981631033366)*sym[0] +  (-0.82079387999921)*sym[1] +  (-2.0/49.0)*sym[2] +   (0.0)*sym[3] +  (0.0)*sym[4],
                                                       (0.0)*sym[-4]          +  (0.0)*sym[-3] +     (0.23171646141418)*sym[-2] +   (0.41687741368864)*sym[-1] +   (0.49426326775432)*sym[0] +   (8.0/49.0)*sym[1] +   (0.0)*sym[2] +  (0.0)*sym[3],
                                                       (0.0)*sym[-5]          +  (0.0)*sym[-4] +  (-0.0013660047715463)*sym[-3] +  (-0.11959385835797)*sym[-2] +  (0.16177618966013)*sym[-1] +  (-6.0/49.0)*sym[0] +   (0.0)*sym[1] +  (0.0)*sym[2],
                                                       (0.0)*sym[-6]          +  (0.0)*sym[-5] +                  (0.0)*sym[-4] +                (0.0)*sym[-3] +               (0.0)*sym[-2] +       (0.0)*sym[-1] +   (0.0)*sym[0] +  (0.0)*sym[1],
                                                       (0.0)*sym[-7]          +  (0.0)*sym[-6] +                  (0.0)*sym[-5] +                (0.0)*sym[-4] +               (0.0)*sym[-3] +       (0.0)*sym[-2] +  (0.0)*sym[-1] +  (0.0)*sym[0]);

    constexpr stenseal::StencilTensor2D<8,8> bdry_row4((0.0)*sym[0]  +   (0.0)*sym[1] +   (-0.0048851053342774)*sym[2] +  (0.0048851053342774)*sym[3] +                (0.0)*sym[4] +       (0.0)*sym[5] +        (0.0)*sym[6] +  (0.0)*sym[7],
                                                       (0.0)*sym[-1] +   (0.0)*sym[0] +      (0.03532953224749)*sym[1] +   (-0.03532953224749)*sym[2] +                (0.0)*sym[3] +       (0.0)*sym[4] +        (0.0)*sym[5] +  (0.0)*sym[6],
                                                       (0.0)*sym[-2] +  (0.0)*sym[-1] +     (-0.20266778705638)*sym[0] +      (0.245854593445)*sym[1] +  (-0.12652013972195)*sym[2] +       (0.0)*sym[3] +        (0.0)*sym[4] +  (0.0)*sym[5],
                                                       (0.0)*sym[-3] +  (0.0)*sym[-2] +     (0.23654388769365)*sym[-1] +    (0.42556235980716)*sym[0] +   (0.50456041916586)*sym[1] +   (1.0/6.0)*sym[2] +        (0.0)*sym[3] +  (0.0)*sym[4],
                                                       (0.0)*sym[-4] +  (0.0)*sym[-3] +   (-0.065310349870052)*sym[-2] +  (-0.80512923096408)*sym[-1] +  (-0.75456041916586)*sym[0] +  (-5.0/6.0)*sym[1] +  (-1.0/24.0)*sym[2] +  (0.0)*sym[3],
                                                       (0.0)*sym[-5] +  (0.0)*sym[-4] +  (0.00098982231957593)*sym[-3] +   (0.16415670462514)*sym[-2] +  (0.50152013972195)*sym[-1] +   (1.0/2.0)*sym[0] +    (1.0/6.0)*sym[1] +  (0.0)*sym[2],
                                                       (0.0)*sym[-6] +  (0.0)*sym[-5] +                  (0.0)*sym[-4] +                (0.0)*sym[-3] +          (-1.0/8.0)*sym[-2] +  (1.0/6.0)*sym[-1] +   (-1.0/8.0)*sym[0] +  (0.0)*sym[1],
                                                       (0.0)*sym[-7] +  (0.0)*sym[-6] +                  (0.0)*sym[-5] +                (0.0)*sym[-4] +               (0.0)*sym[-3] +      (0.0)*sym[-2] +       (0.0)*sym[-1] +  (0.0)*sym[0]);

    constexpr stenseal::StencilTensor2D<8,8> bdry_row5((0.0)*sym[0]  +   (0.0)*sym[1] +             (-1.0/784.0)*sym[2] +            (1.0/784.0)*sym[3] +                  (0.0)*sym[4] +        (0.0)*sym[5] +       (0.0)*sym[6] +        (0.0)*sym[7],
                                                       (0.0)*sym[-1] +   (0.0)*sym[0] +     (0.0029864550678486)*sym[1] +  (-0.0029864550678486)*sym[2] +                  (0.0)*sym[3] +        (0.0)*sym[4] +       (0.0)*sym[5] +        (0.0)*sym[6],
                                                       (0.0)*sym[-2] +  (0.0)*sym[-1] +    (-0.0012563883873295)*sym[0] +  (0.00074967514667794)*sym[1] +  (0.00050671324065158)*sym[2] +        (0.0)*sym[3] +       (0.0)*sym[4] +        (0.0)*sym[5],
                                                       (0.0)*sym[-3] +  (0.0)*sym[-2] +   (-0.0013944632042869)*sym[-1] +    (-0.12208539707376)*sym[0] +     (0.16514652694471)*sym[1] +   (-1.0/8.0)*sym[2] +       (0.0)*sym[3] +        (0.0)*sym[4],
                                                       (0.0)*sym[-4] +  (0.0)*sym[-3] +   (0.00098982231957593)*sym[-2] +    (0.16415670462514)*sym[-1] +     (0.50152013972195)*sym[0] +    (1.0/2.0)*sym[1] +   (1.0/6.0)*sym[2] +        (0.0)*sym[3],
                                                       (0.0)*sym[-5] +  (0.0)*sym[-4] +  (-4.9915591726553e-05)*sym[-3] +  (-0.041110037834289)*sym[-2] +   (-0.83384004657398)*sym[-1] +   (-3.0/4.0)*sym[0] +  (-5.0/6.0)*sym[1] +  (-1.0/24.0)*sym[2],
                                                       (0.0)*sym[-6] +  (0.0)*sym[-5] +                   (0.0)*sym[-4] +                 (0.0)*sym[-3] +             (1.0/6.0)*sym[-2] +   (1.0/2.0)*sym[-1] +   (1.0/2.0)*sym[0] +    (1.0/6.0)*sym[1],
                                                       (0.0)*sym[-7] +  (0.0)*sym[-6] +                   (0.0)*sym[-5] +                 (0.0)*sym[-4] +                 (0.0)*sym[-3] +  (-1.0/8.0)*sym[-2] +  (1.0/6.0)*sym[-1] +   (-1.0/8.0)*sym[0]);


    constexpr stenseal::StencilTensor3D<6,8,8> d2_boundary( bdry_row0,
                                                            bdry_row1,
                                                            bdry_row2,
                                                            bdry_row3,
                                                            bdry_row4,
                                                            bdry_row5);

    constexpr stenseal::MetricOperator<5,8,6> D2 (d2_interior,
                                                  d2_boundary);

    return std::make_pair(D2,D1);

  }


}

#endif /* _OPERATOR_LIB_H */
