
#include <deal.II/lac/vector.h>
#include <deal.II/base/numbers.h>

#include "stenseal/operator.h"
#include "stenseal/upwind_laplace.h"
#include "stenseal/operator_lib.h"
#include <deal.II/lac/sparsity_pattern.h>
#include <deal.II/lac/sparse_matrix.h>
#include <cmath>

/**
 * Test second order upwind laplace
 */

double mref_2nd_order[] = {
  2.8000,   -6.0000,  3.6000,  -0.4000,        0,        0,        0,        0,        0,        0,
  2.8000,   -6.0000,  3.6000,  -0.4000,        0,        0,        0,        0,        0,        0,
  -1.1000,    4.5000,  -6.4500,  3.8000,  -0.7500,        0,        0,        0,        0,        0,
  -0.1000,  -0.5000,   3.8000,  -6.4500,   4.0000,  -0.7500,        0,        0,        0,        0,
  0,        0,  -0.7500,   4.0000,  -6.5000,   4.0000,  -0.7500,        0,        0,        0,
  0,        0,        0,  -0.7500,   4.0000,  -6.5000,   4.0000,  -0.7500,        0,        0,
  0,        0,        0,        0,  -0.7500,   4.0000,  -6.5000,   4.0000,  -0.7500,        0,
  0,        0,        0,        0 ,       0,  -0.7500,   4.0000,  -6.5000,   4.0000,  -0.7500,
  0,        0,        0,        0,        0,        0,  -0.6000 ,  3.2000 , -4.6000,   2.0000,
  0,        0,        0,        0,        0 ,       0,        0,  -3.0000,   6.0000,  -3.0000};


  double mref_3rd_order[] = {
   1.075473506632927, -2.511885591595736,  1.835998006287861, -0.438233264320221,  0.038647342995169,                  0,                  0,                  0,                  0,                  0,
   0.811655821748989, -1.380631962930099,  0.257973479246771,  0.379325643300799, -0.068322981366460,                  0,                  0,                  0,                  0,                  0,
   0.254665886518439,  0.314054670387374, -1.243398745761695,  0.467998919794761,  0.264650283553875, -0.057971014492754,                  0,                  0,                  0,                  0,
   -0.164337474120083,  0.442546583850932,  0.448498964803313, -1.428398895790200,  0.507246376811594,  0.250000000000000, -0.055555555555556,                  0,                  0,                  0,
   0.014492753623188, -0.079710144927536,  0.253623188405797,  0.507246376811594, -1.390096618357488,  0.500000000000000,  0.250000000000000, -0.055555555555556,                  0,                  0,
   0,                  0, -0.055555555555556,  0.250000000000000,  0.500000000000000, -1.388888888888889,  0.500000000000000, 0.250000000000000, -0.055555555555556,                   0,
   0,                  0,                  0, -0.055555555555556,  0.250000000000000,  0.500000000000000, -1.393719806763285,  0.507246376811594,  0.250000000000000, -0.057971014492754,
   0,                  0,                  0,                  0, -0.057971014492754,  0.260869565217391,  0.529300567107750, -1.508409097728568,  0.675293305728088,  0.100916674168092,
   0,                  0,                  0,                  0,                  0, -0.047619047619048,  0.214285714285714,  0.554705215419501, -1.561791383219954,  0.840419501133787,
   0,                  0,                  0,                  0,                  0,                  0, -0.154589371980676,  0.850490759911050, -1.237213403880070,  0.541312015949697};

   double mref_4th_order[] = {
     1.336221213417364, -3.143071786321153,  2.411600780695188, -0.731187511242844,  0.111357511508477,  0.022476039032408, -0.007396247089440,                  0,                  0,                  0,
     0.804447935880775, -1.360652110638654,  0.238604241481773,  0.398779563965364, -0.088162072611818,  0.002141425309071,  0.004841016613489,                  0,                  0,                  0,
     0.267836979334519,  0.354996554399711, -1.677177847212427,  1.201904343321228, -0.110166180704016, -0.058673927711613,  0.021280078572598,                  0,                  0,                  0,
     -0.210872649567740,  0.489776242991018,  0.992176068647725, -2.809296878224945,  1.720027308206487, -0.144379345689768, -0.057564974550696,  0.020134228187919,                  0,                  0,
     0.037892486554968, -0.112039300610852, -0.094100279351347,  1.779750478630323, -3.229588496443332,  1.815279369236645, -0.162472035794183, -0.055555555555556,  0.020833333333333,                  0,
     0.007648096615194,  0.002721394663611, -0.050117313253669, -0.149392517415107,  1.815279369236645, -3.254587948564049,  1.843959731543624, -0.215324384787472, -0.002703206562267,  0.002516778523490,
     -0.002432322868339,  0.005945678122607,  0.017566776271339, -0.057564974550696, -0.157019954056124,  1.782081888203234, -3.104032161344934,  1.605461647766166, -0.045306699790849, -0.044699877752404,
     0,                  0,                  0,  0.024390243902439, -0.065040650406504, -0.252087084629236,  1.944827524529746, -3.037407220285368,  1.427541994116328, -0.042224807227405,
     0,                  0,                  0,                  0,  0.016393442622951, -0.002127113360472, -0.036889061578342,  0.959495438668352, -1.881782452274543,  0.944909745922054,
     0,                  0,                  0,                  0,                  0,  0.007396247089440,  0.133963428792045,  0.553732231087227, -1.538939736908346,  0.843847829939636};

    double mref_6th_order[] = {
      1.524022951660579,  -3.157692414221208,   1.386538185187234,   0.551673167411789,  -0.256435619342578,  -0.048658572198258,   0.009537909328827,  -0.014144163066934,   0.006013431696387,  -0.000854876455838,                   0,                   0,                   0,                   0,
      0.787820878589527,  -1.220956337794012,   0.003109498904090,   0.440107295693326,   0.052334423606261,  -0.056613607980359,  -0.011267064706419,   0.008455522562390,  -0.003475008557625,   0.000484399682821,                   0,                   0,                   0,                   0,
      0.260512005114353,   0.007003056503810,  -0.603251637844055,   0.120516521373451,   0.294171463301912,  -0.150741266380798,   0.089547735757946,  -0.019891434108178,   0.002277248564169,  -0.000143692282611,                   0,                   0,                   0,                   0,
     -0.103307657953146,   0.491459944931315,   0.059755643127707,  -1.070402191182653,   0.465971532904693,   0.228814341687903,  -0.102290029704621,   0.033630300233888,  -0.003292535299231,  -0.000339348745856,                   0,                   0,                   0,                   0,
     -0.062603214449412,   0.080420542026762,   0.200716404625077,   0.641223420487392,  -1.969099845097115,   1.131884695300359,   0.069648925211535,  -0.141323924289083,   0.059982922573875,  -0.011462093204847,   0.000612166815457,                   0,                   0,                   0,
      0.038126439507071,  -0.077803837232856,  -0.091984599212682,   0.281600787783433,   1.012285044123698,  -2.416143692667777,   1.274803789134117,   0.072527940588886,  -0.142592177401498,   0.059582477059064,  -0.010949654401533,   0.000547482720077,                   0,                   0,
      0.003005545363271,  -0.015712599843477,   0.055449118785302,  -0.127744145892693,   0.063208011873107,   1.293601243154451,  -2.543476515700855,   1.289802737067010,   0.076367608508514,  -0.142245861878205,   0.057166955844669,  -0.010675160079745,   0.001812253693885,  -0.000559190895235,
     -0.004457048421995,   0.011791735110444,  -0.012317033851707,   0.041998951333756,  -0.128254732679479,   0.073597391935069,   1.289802737067010,  -2.543133902871902,   1.296979181095355,   0.045202975580560,  -0.106107306596950,   0.051786033755735,  -0.023321571930709,   0.006432590474814,
      0.001867391602594,  -0.004775689270574,   0.001389611494663,  -0.004052108478990,   0.053644877147358,  -0.142592177401498,   0.075257902857581,   1.278132641907962,  -2.488931822906003,   1.222895151451793,   0.053595201227899,  -0.024423285822365,  -0.038260631119428,   0.016252937309009,
     -0.000296835434086,   0.000744360640009,  -0.000098042814943,  -0.000466977804844,  -0.011462093204847,   0.066622039200056,  -0.156740753300305,   0.049809170898614,   1.367378006738739,  -2.567552302185630,   1.311503717290921,  -0.110909174888323,   0.089813927882151,  -0.038345043017513,
                      0,                   0,                   0,                   0,   0.000444856348471,  -0.008897126969416,   0.045775949814452,  -0.084964516125825,   0.043548708734521,   0.953058447384441,  -1.689717620856558,   0.461592613300390,   0.372519059431397,  -0.093360371061874,
                      0,                   0,                   0,                   0,                   0,   0.000897196261682,  -0.017239884689532,   0.083632024607392,  -0.040024059087665,  -0.162549315943801,   0.930950335983404,  -1.334878807368582,   0.338933641089389,   0.200278869147711,
                      0,                   0,                   0,                   0,                   0,                   0,   0.001299516301367,  -0.016723245205521,  -0.027840174062285,   0.058447257741219,   0.333594543220580,   0.150493400267925,  -1.305115733727477,   0.805844435464193,
                      0,                   0,                  0,                   0,                   0,                   0,  -0.001774557164044,   0.020413421619919,  -0.112835755444083,  -0.253091098849647,   0.794563018182594,   0.994279469137081,  -2.905763449774142,   1.464208952292323};

template <typename OperatorType>
bool test_matrix(OperatorType Dm, int order, unsigned int n)
{
      const int dim = 1;
      bool all_conv = false;
      std::array<unsigned int,dim> n_nodes{ n };
      int n_nodes_tot = n_nodes[0];
      typedef stenseal::CartesianGeometry<dim> Geometry;
      Geometry geometry(n_nodes);

      dealii::SparsityPattern sp_Laplace;
      dealii::SparseMatrix<double> matrix_Laplace;


      stenseal::UpwindLaplace<dim,OperatorType,Geometry> op(Dm,geometry);
      op.matrix(matrix_Laplace,sp_Laplace);
      double diff=0;



      if(order == 2){
        for(int i = 0; i < n; ++i){
         for(int j = 0; j <n; ++j){
          diff = diff + fabs( matrix_Laplace.dealii::SparseMatrix<double>::el(i,j)-mref_2nd_order[i*n+j] );
        }
      }

    }else if(order == 3){
      for(int i = 0; i < n; ++i){
       for(int j = 0; j <n; ++j){
        diff = diff + fabs( matrix_Laplace.dealii::SparseMatrix<double>::el(i,j)-mref_3rd_order[i*n+j] );
      }
    }

  }else if(order == 4){
    for(int i = 0; i < n; ++i){
     for(int j = 0; j <n; ++j){
      diff = diff +  fabs( matrix_Laplace.dealii::SparseMatrix<double>::el(i,j)-mref_4th_order[i*n+j] );
    }
  }
  }else if(order == 6){
  for(int i = 0; i < n; ++i){
   for(int j = 0; j <n; ++j){
    diff = diff +  fabs( matrix_Laplace.dealii::SparseMatrix<double>::el(i,j)-mref_6th_order[i*n+j] );
  }
}
}

double tol = 1e-13;
if( diff < tol && diff > -tol){
  all_conv = true;
  printf("OK\n");
}else{
  printf("NOT OK\n");
}

return all_conv;
}

int main(int argc, char *argv[])
{
  bool all_conv = true;

  unsigned int n234=10;
  unsigned int n6=14;

  printf("Second order Upwind: ");
  all_conv = test_matrix(stenseal::upwind_operator_2nd_order(),2,n234);
  //printf("\n Kalles Second order Upwind:\n");
  //all_conv = test_matrix(stenseal::upwind_operator_2nd_order_kalle()) && all_conv;

  printf("\nThird order Upwind: ");
  all_conv = test_matrix(stenseal::upwind_operator_3rd_order(),3,n234) && all_conv;

  printf("\nFourth order Upwind: ");
  all_conv = test_matrix(stenseal::upwind_operator_4th_order(),4,n234) && all_conv;

  printf("\n 6:th order Upwind: ");
  all_conv = test_matrix(stenseal::upwind_operator_6th_order(),6,n6) && all_conv;



  if(all_conv) {
    printf("\nAll matrices are right\n");
    return 0;
  }
  else {
    printf("\nOne or more matrices have the wrong coefficinets\n");
    return 1;
  }
}
