
#include <deal.II/lac/vector.h>
#include <deal.II/base/numbers.h>

#include "stenseal/asymmetric_sbp.h"
#include "stenseal/compact_laplace.h"
#include "stenseal/operator_lib.h"
#include <deal.II/lac/sparsity_pattern.h>
#include <deal.II/lac/sparse_matrix.h>


double mref_2nd_order[] = {
 1,   -2,    1,    0,    0,    0,    0,    0,    0,    0,
 1,   -2,    1,    0,    0,    0,    0,    0,    0,    0,
 0,    1,   -2,    1,    0,    0,    0,    0,    0,    0,
 0,    0,    1,   -2,    1,    0,    0,    0,    0,    0,
 0,    0,    0,    1,   -2,    1,    0,    0,    0,    0,
 0,    0,    0,    0,    1,   -2,    1,    0,    0,    0,
 0,    0,    0,    0,    0,    1,   -2,    1,    0,    0,
 0,    0,    0,    0,    0,    0,    1,   -2,    1,    0,
 0,    0,    0,    0,    0,    0,    0,    1,   -2,    1,
 0,    0,    0,    0,    0,    0,    0,    1,   -2,    1,
};

double mref_4th_order[] ={
 2.000000000000000, -4.999999999999999,  4.000000000000000, -1.000000000000000,                  0,                  0,                  0,                  0,                  0,                  0,                  0,                  0,
 1.000000000000000, -2.000000000000000,  1.000000000000000, -0.000000000000000,                  0,                  0,                  0,                  0,                  0,                  0,                  0,                  0,
 -0.093023255813953,  1.372093023255814, -2.558139534883721,  1.372093023255814, -0.093023255813954, -0.000000000000000,                  0,                  0,                  0,                  0,                  0,                  0,
 -0.020408163265306, -0.000000000000000,  1.204081632653061, -2.408163265306123,  1.306122448979592, -0.081632653061224,                  0,                  0,                  0,                  0,                  0,                  0,
 0,                  0, -0.083333333333333,  1.333333333333333, -2.500000000000000,  1.333333333333333, -0.083333333333333,                  0,                  0,                  0,                  0,                  0,
 0,                  0, -0.000000000000000, -0.083333333333333,  1.333333333333333, -2.500000000000000,  1.333333333333333, -0.083333333333333,                  0,                  0,                  0,                  0,
 0,                  0,                  0,                  0, -0.083333333333333,  1.333333333333333, -2.500000000000000,  1.333333333333333, -0.083333333333333, -0.000000000000000,                  0,                  0,
 0,                  0,                  0,                  0,                  0, -0.083333333333333,  1.333333333333333, -2.500000000000000,  1.333333333333333, -0.083333333333333, -0.000000000000000,  0.000000000000000,
 0,                  0,                  0,                  0,                  0,                  0, -0.081632653061224,  1.306122448979592, -2.408163265306123,  1.204081632653061,                  0, -0.020408163265306,
 0,                  0,                  0,                  0,                  0,                  0, -0.000000000000000, -0.093023255813953,  1.372093023255814, -2.558139534883721,  1.372093023255814, -0.093023255813954,
 0,                  0,                  0,                  0,                  0,                  0,                  0, -0.000000000000000,                  0,  1.000000000000000, -2.000000000000000,  1.000000000000000,
 0,                  0,                  0,                  0,                  0,                  0,                  0,  0.000000000000000, -1.000000000000000,  4.000000000000000, -4.999999999999999,  2.000000000000000
};

double mref_6th_order[] = {2.78823845458764,-8.02452560627152,8.21571787920971,-3.38238454587638,0.274525606271522,0.128428212079029,1.09810321872955e-17,0,-3.43157255852984e-19,0,0,0,0,0,0,0,0,0,1.05341296928328,-2.35039817974972,1.86746302616610,-1.03412969283276,0.600398179749716,-0.136746302616610,0,4.99059713058840e-18,0,0,0,0,0,0,0,0,0,0,-0.644178040083610,4.13755686708472,-8.10844706750277,6.94178040083610,-2.88755686708472,0.560844706750277,4.42287298633408e-17,0,2.76429561645880e-18,0,0,0,0,0,0,0,0,0,0.213357591590471,-1.15907818622877,3.51169372395347,-4.72314486533557,2.48969024071655,-0.341475399639236,0.00895689494308637,5.59358493466677e-18,0,0,0,0,0,0,0,0,0,0,-0.179078329313190,0.915651051584783,-1.98760103254200,3.38764758156659,-3.71985950658034,1.73558249756676,-0.164529643265203,0.0121873809826076,0,0,0,0,0,0,0,0,0,0,0.0400200147637421,-0.187522354892963,0.347126777927445,-0.417791070219097,1.56060173664224,-2.68487020844273,1.47941827812150,-0.147941827812150,0.0109586539120111,0,0,0,0,0,0,0,0,0,3.46944695195361e-18,0,2.77555756156289e-17,0.0111111111111111,-0.150000000000000,1.50000000000000,-2.72222222222222,1.50000000000000,-0.150000000000000,0.0111111111111111,0,0,0,0,0,0,0,0,0,6.93889390390723e-18,0,6.93889390390723e-18,0.0111111111111111,-0.150000000000000,1.50000000000000,-2.72222222222222,1.50000000000000,-0.150000000000000,0.0111111111111111,0,0,0,0,0,0,0,-1.08420217248550e-19,0,1.73472347597681e-18,0,0,0.0111111111111111,-0.150000000000000,1.50000000000000,-2.72222222222222,1.50000000000000,-0.150000000000000,0.0111111111111111,0,0,0,0,0,0,0,0,0,0,0,0,0.0111111111111111,-0.150000000000000,1.50000000000000,-2.72222222222222,1.50000000000000,-0.150000000000000,0.0111111111111111,8.67361737988404e-19,0,0,0,0,0,0,0,0,0,0,0,0.0111111111111111,-0.150000000000000,1.50000000000000,-2.72222222222222,1.50000000000000,-0.150000000000000,0.0111111111111111,0,9.54097911787244e-18,8.67361737988404e-19,4.33680868994202e-19,0,0,0,0,0,0,0,0,0.0111111111111111,-0.150000000000000,1.50000000000000,-2.72222222222222,1.50000000000000,-0.150000000000000,0.0111111111111111,-1.73472347597681e-18,-3.46944695195361e-18,-8.67361737988404e-19,0,0,0,0,0,0,0,0,0,0.0109586539120111,-0.147941827812150,1.47941827812150,-2.68487020844273,1.56060173664224,-0.417791070219097,0.347126777927445,-0.187522354892963,0.0400200147637421,0,0,0,0,0,0,0,0,0,9.51378115554121e-19,0.0121873809826076,-0.164529643265203,1.73558249756676,-3.71985950658034,3.38764758156659,-1.98760103254200,0.915651051584783,-0.179078329313190,0,0,0,0,0,0,0,0,0,0,0,0.00895689494308638,-0.341475399639236,2.48969024071655,-4.72314486533557,3.51169372395347,-1.15907818622877,0.213357591590471,0,0,0,0,0,0,0,0,0,0,1.52036258905234e-17,-2.76429561645880e-18,0.560844706750277,-2.88755686708472,6.94178040083610,-8.10844706750277,4.13755686708472,-0.644178040083610,0,0,0,0,0,0,0,0,0,0,6.23824641323550e-19,-2.49529856529420e-18,-0.136746302616610,0.600398179749716,-1.03412969283276,1.86746302616610,-2.35039817974972,1.05341296928328,0,0,0,0,0,0,0,0,0,0,1.37262902341194e-18,-2.74525804682387e-18,0.128428212079029,0.274525606271522,-3.38238454587638,8.21571787920971,-8.02452560627152,2.78823845458764};

template <typename OperatorTypeD2, typename OperatorTypeD1, typename Quadrature>
bool test_matrix(std::tuple<OperatorTypeD2,OperatorTypeD1, Quadrature> ops, int order, unsigned int &n)
{
  const int dim = 1;

  bool all_conv = false;
  std::array<unsigned int,dim> n_nodes{ n };
  int n_nodes_tot = n_nodes[0];


  typedef stenseal::CartesianGeometry<dim> Geometry;
  Geometry geometry(n_nodes);

  dealii::SparsityPattern sp_Laplace;
  dealii::SparseMatrix<double> matrix_Laplace;


  stenseal::CompactLaplace<dim,OperatorTypeD2,OperatorTypeD1,Geometry> op(std::get<0>(ops),std::get<1>(ops),geometry);
  op.matrix(matrix_Laplace, sp_Laplace);

  //matrix_Laplace.print(std::cout);

  double diff=0;
  double tol = 1e-12;
  if(order == 2){
    for(int i = 0; i < n; ++i){
     for(int j = 0; j <n; ++j){
      diff = diff + fabs(matrix_Laplace.dealii::SparseMatrix<double>::el(i,j)-mref_2nd_order[i*n+j]);
      }
    }
  }else if(order == 4){
   for(int i = 0; i < n; ++i){
    for(int j = 0; j <n; ++j){
      diff = diff +  fabs(matrix_Laplace.dealii::SparseMatrix<double>::el(i,j)-mref_4th_order[i*n+j]);
    }
  }
  }else if(order == 6){
    for(int i = 0; i < n; ++i){
     for(int j = 0; j <n; ++j){
      diff = diff +  fabs(matrix_Laplace.dealii::SparseMatrix<double>::el(i,j)-mref_6th_order[i*n+j]);
    }
  }
}


if( diff < tol && diff > -tol){
  all_conv = true;
  printf("OK\n");
}else{
  printf("NOT OK\n");
}
return all_conv;
}

int main(int argc, char *argv[])
{
  bool all_conv = true;
  unsigned int n2 = 10;
  unsigned int n4 = 12;
  unsigned int n6 = 18;

  printf("\n 2:nd order Compact: ");
  all_conv = test_matrix(stenseal::compact_operators_2nd_order(),2, n2);

  printf("\n 4:th order Compact: ");
  all_conv = test_matrix(stenseal::compact_operators_4th_order(),4, n4);

  printf("\n 6:th order Compact: ");
  all_conv = test_matrix(stenseal::compact_operators_6th_order(),6, n6);

  if(all_conv) {
    printf("\n All matrices are right\n");
    return 0;
  }
  else {
    printf("\n One or more matrices have the wrong coefficinets\n");
    return 1;
  }
}